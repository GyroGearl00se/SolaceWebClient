@page "/"
@rendermode InteractiveServer
@using SolaceWebClient.Services
@using Blazorise
@using Blazorise.DataGrid
@inject SolacePublishService PublishService
@inject SolaceSubscribeService SubscribeService
@inject Blazored.Toast.Services.IToastService toastService
@implements IDisposable
@inject PresetService PresetService
@inject IJSRuntime JSRuntime

<h3>Solace PubSub+</h3>

<div class="form-container">
    <div class="form-section">
        <h4>Publish Message</h4>
        <div class="form-group">
            <Dropdown @ref="pubPresetDropdown">
                <DropdownToggle Color="Color.Primary">@selectedPubPreset</DropdownToggle>
                <DropdownMenu>
                    @foreach (var group in presetGroups)
                    {
                        <Dropdown>
                            <DropdownToggle> @group.GroupName </DropdownToggle>
                            <DropdownMenu>
                                @foreach (var preset in group.Presets)
                                {
                                    <DropdownItem @onclick="() => LoadPresetPublish(preset)">@preset.Name</DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    }
                    @foreach (var preset in ungroupedPresets)
                    {
                        <DropdownItem @onclick="() => LoadPresetPublish(preset)">@preset.Name</DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>
        </div>
        <div class="form-group">
            <div class="input-with-checkbox">
                <div class="input-container">
                    <label>Hostname:Port</label>
                    <input @bind="publishHost" name="publishHost" autocomplete="on" placeholder="tcps://broker.domain:55443" />
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" @bind="publishSslVerify" id="publishSslVerify" />
                    <label for="publishSslVerify">SSL Verify</label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label>VPN Name</label>
            <input @bind="publishVpnName" name="publishVpnName" autocomplete="on" placeholder="default" />
        </div>
        <div class="form-group">
            <label>Username</label>
            <input @bind="publishUsername" name="publishUsername" autocomplete="on" placeholder="Username" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <input @bind="publishPassword" name="publishPassword" type="password" autocomplete="on" placeholder="Password" />
        </div>
        <div class="form-group">
            <label>Topic</label>
            <input @bind="publishTopic" name="publishTopic" autocomplete="on" placeholder="topic" />
        </div>
        <div class="form-group">
            <label>Message</label>
            <textarea @bind="publishMessage" name="publishMessage" autocomplete="on" placeholder="Message"></textarea>
        </div>
        <button class="btn btn-primary" @onclick="ConnectAndPublish">Publish</button>
    </div>

    <div class="form-section">
        <h4>Subscribe to Topic</h4>
        <div class="form-group">
            <Dropdown @ref="subPresetDropdown">
                <DropdownToggle Color="Color.Primary">@selectedSubPreset</DropdownToggle>
                <DropdownMenu>
                    @foreach (var group in presetGroups)
                    {
                        <Dropdown>
                            <DropdownToggle> @group.GroupName </DropdownToggle>
                            <DropdownMenu>
                                @foreach (var preset in group.Presets)
                                {
                                    <DropdownItem @onclick="() => LoadPresetSubscribe(preset)">@preset.Name</DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    }
                    @foreach (var preset in ungroupedPresets)
                    {
                        <DropdownItem @onclick="() => LoadPresetSubscribe(preset)">@preset.Name</DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>
        </div>
        <div class="form-group">
            <div class="input-with-checkbox">
                <div class="input-container">
                    <label>Hostname:Port</label>
                    <input @bind="subscribeHost" name="subscribeHost" autocomplete="on" placeholder="tcps://broker.domain:55443" />
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" @bind="subscribeSslVerify" id="subscribeSslVerify" />
                    <label for="subscribeSslVerify">SSL Verify</label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label>VPN Name</label>
            <input @bind="subscribeVpnName" name="subscribeVpnName" autocomplete="on" placeholder="default" />
        </div>
        <div class="form-group">
            <label>Username</label>
            <input @bind="subscribeUsername" name="subscribeUsername" autocomplete="on" placeholder="Username" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <input @bind="subscribePassword" name="subscribePassword" type="password" autocomplete="on" placeholder="Password" />
        </div>
        <div class="form-group">
            <label>Topic</label>
            <input @bind="subscribeTopic" name="subscribeTopic" autocomplete="on" placeholder="topic" />
        </div>
        <button class="btn btn-primary" @onclick="SubscribeToTopic">Subscribe</button>
        <button class="btn btn-primary" @onclick="Unsubscribe">Unsubscribe</button>
    </div>
</div>

<DataGrid TItem="MessageDetails"
          Data="@messages"
          @ref="dataGrid"
          RowOverlayBackground="Background.Transparent"
          DetailRowStartsVisible="false"
          Filterable
          FilterMethod="DataGridFilterMethod.StartsWith"
          ShowPager
          ShowPageSizes
          PagerPosition="DataGridPagerPosition.TopAndBottom"
          PagerOptions="new(){ ButtonSize=Size.Small}"
          Class="datagrid">
    <TotalItemsTemplate><Badge Color="Color.Success">@context.TotalItems total items</Badge></TotalItemsTemplate>
    <TotalItemsShortTemplate><Badge Color="Color.Success">@context.TotalItems</Badge></TotalItemsShortTemplate>
    <DataGridColumns>
        <DataGridColumn TItem="MessageDetails" Field="ADMessageId" Caption="Message ID" />
        <DataGridColumn TItem="MessageDetails" Field="FormattedDateTime" Caption="Sender Timestamp" />
        <DataGridColumn TItem="MessageDetails" Field="DestinationName" Caption="Destination" />
        <DataGridColumn TItem="MessageDetails" Field="ApplicationMessageId" Caption="Application Message ID" />
        <DataGridColumn TItem="MessageDetails" Field="SenderId" Caption="Sender ID" />
        <DataGridColumn TItem="MessageDetails" Field="ApplicationMessageType" Caption="Message Type" />
        <DataGridColumn TItem="MessageDetails" Field="CorrelationId" Caption="Correlation ID" />
        <DataGridColumn TItem="MessageDetails" Field="DeliveryMode" Caption="Delivery Mode" />
        <DataGridNumericColumn TItem="MessageDetails" DisplayFormat="{0:N0}" Field="Size" Caption="Size in bytes (experimental)" />
    </DataGridColumns>
    <DetailRowTemplate Context="message">
        <div class="detail-row-user-properties">
            <h3>User Properties:</h3>
            @if (message.UserProperties != null)
            {
                foreach (var property in message.UserProperties)
                {
                    <p>@property.Key: @property.Value</p>
                }
            }
            else
            {
                <p>No user properties</p>
            }
        </div>
        <div class="detail-row-message-content">
            <h3>Content:</h3>
            @if (!string.IsNullOrWhiteSpace(message.MessageContent))
            {
                <button class="btn btn-primary"
                         @onclick="async () => await DownloadFileAsync(message)"
                         @onclick:preventDefault="true">
                    Download
                </button>
                <br>
                <div>
                    @message.MessageContent
                </div>
                <br>
            }
            else if (!string.IsNullOrWhiteSpace(message.MessageContentXML))
            {
                <button class="btn btn-primary"
                        @onclick="async () => await DownloadFileXMLAsync(message)"
                        @onclick:preventDefault="true">
                    Download
                </button>
                <pre><code>@message.MessageContentXML</code></pre>
            }
            else
            {
                <p>No content available</p>
            }
        </div>
        


    </DetailRowTemplate>
</DataGrid>

<script>
    function downloadFileFromBase64(fileName, contentBase64) {
        const link = document.createElement('a');
        link.href = contentBase64;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>



@code {
    private string publishHost;
    private string publishVpnName;
    private string publishUsername;
    private string publishPassword;
    private string publishTopic;
    private string publishMessage;
    private bool publishSslVerify = true;
    private string subscribeHost;
    private string subscribeVpnName;
    private string subscribeUsername;
    private string subscribePassword;
    private string subscribeTopic;
    private bool subscribeSslVerify = true;

    private string selectedPubPreset = "Select Preset";
    private string selectedSubPreset = "Select Preset";
    Dropdown pubPresetDropdown;
    Dropdown subPresetDropdown;
    private List<PresetGroupModel> presetGroups = new List<PresetGroupModel>();
    private List<PresetModel> ungroupedPresets = new List<PresetModel>();

    private DataGrid<MessageDetails> dataGrid;
    private List<MessageDetails> messages = new List<MessageDetails>();

    protected override async Task OnInitializedAsync()
    {
        presetGroups = await PresetService.GetPresetGroupsAsync();
        ungroupedPresets = await PresetService.GetUngroupedPresetsAsync();
    }

    private async Task LoadPresetPublish(PresetModel preset)
    {
        if (preset != null)
        {
            publishHost = preset.Host;
            publishVpnName = preset.VpnName;
            publishUsername = preset.Username;
            publishTopic = preset.Topic;
            selectedPubPreset = preset.Name;

            Console.WriteLine($"Loaded Preset: {preset.Name}");
        }
        HidePubDropdownMenu();

    }

    private async Task LoadPresetSubscribe(PresetModel preset)
    {
        if (preset != null)
        {
            subscribeHost = preset.Host;
            subscribeVpnName = preset.VpnName;
            subscribeUsername = preset.Username;
            subscribeTopic = preset.Topic;
            selectedSubPreset = preset.Name;

            Console.WriteLine($"Loaded Preset: {preset.Name}");
        }
        HideSubDropdownMenu();

    }

    private void ConnectAndPublish()
    {
        try
        {
            PublishService.PublishMessage(publishHost, publishVpnName, publishUsername, publishPassword, publishTopic, publishMessage, publishSslVerify);
            toastService.ShowSuccess("Successfully published message");
        }
        catch (SolaceSystems.Solclient.Messaging.OperationErrorException ex)
        {
            toastService.ShowError($"Error publishing message: {ex.ErrorInfo}");
        }
    }

    private async Task SubscribeToTopic()
    {
        try
        {
            SubscribeService.SubscribeToTopic(subscribeHost, subscribeVpnName, subscribeUsername, subscribePassword, subscribeTopic, subscribeSslVerify, message =>
            {
                InvokeAsync(() =>
                {
                    messages.Add(message);
                    dataGrid.Reload();
                    StateHasChanged();
                });
            });
            toastService.ShowSuccess("Subscription started");
        }
        catch (SolaceSystems.Solclient.Messaging.OperationErrorException ex)
        {
            toastService.ShowError($"Error starting Subscription: {ex.ErrorInfo}");
        }


    }

    public void Unsubscribe()
    {
        try
        {
            SubscribeService.Disconnect();
            toastService.ShowSuccess("Subscription stopped");
        }
        catch (SolaceSystems.Solclient.Messaging.OperationErrorException ex)
        {
            toastService.ShowError($"Error: {ex.ErrorInfo}");
        }

    }

    public void Dispose()
    {
        SubscribeService.Dispose();
        PublishService.Dispose();
    }

    Task HidePubDropdownMenu()
    {
        return pubPresetDropdown.Hide();
    }

    Task HideSubDropdownMenu()
    {
        return subPresetDropdown.Hide();
    }

    private async Task DownloadFileAsync(MessageDetails message)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(message.MessageContent);
        var base64 = Convert.ToBase64String(byteArray);
        var fileContent = $"data:text/plain;base64,{base64}";
        DateTime timenow = DateTime.Now;
        var fileName = message.DestinationName + "-" + timenow.ToString("yyyyMMdd-HHmmss") + ".txt";

        await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", fileName, fileContent);
    }
    private async Task DownloadFileXMLAsync(MessageDetails message)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(message.MessageContentXML);
        var base64 = Convert.ToBase64String(byteArray);
        var fileContent = $"data:text/plain;base64,{base64}";
        DateTime timenow = DateTime.Now;
        var fileName = message.DestinationName + "-" + timenow.ToString("yyyyMMdd-HHmmss") + ".xml";

        await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", fileName, fileContent);
    }
}

@page "/semp"
@using SolaceWebClient.Services
@inject SEMPService SEMPService
@inject IToastService toastService
@inject NavigationManager Navigation

<h3>SEMP API</h3>

<div class="form-container">
    <div class="form-section">
        <h4>SEMP Configuration</h4>
        <div class="form-group">
            <div class="input-with-checkbox">
                <div class="input-container">
                    <label>URL</label>
                    <input @bind="sempUrl" name="sempUrl" autocomplete="on" placeholder="URL" />
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" @bind="sempSslVerify" id="sempSslVerify" />
                    <label for="sempSslVerify">SSL Verify</label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label>Message VPN</label>
            <input @bind="sempMessageVpn" name="sempMessageVpn" autocomplete="on" placeholder="Message VPN" />
        </div>
        <div class="form-group">
            <label>Username</label>
            <input @bind="sempUsername" name="sempUsername" autocomplete="on" placeholder="Username" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <input @bind="sempPassword" name="sempPassword" type="password" autocomplete="on" placeholder="Password" />
        </div>
        <button class="btn btn-primary" @onclick="GetQueues">Get Queues</button>
    </div>
</div>



<div>
    <h4>Queues</h4>

    <input type="text" @bind="QueueNameFilterText" placeholder="Filter Queue Name..." @oninput="ApplyFilter" />
    <input type="text" @bind="QueueOwnerFilterText" placeholder="Filter Queue Owner..." @oninput="ApplyFilter" />


    <table class="table">
        <thead>
            <tr>
                <th>Queue Name</th>
                <th>Owner</th>
                <th>Browse</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var queue in PagedQueues)
            {
                <tr>
                    <td>@queue.queueName</td>
                    <td>@queue.queueOwner</td>
                    <td><button class="btn btn-secondary" @onclick="() => BrowseQueue(queue.queueName,queue.queueOwner)">Browse Queue</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
    <button @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>

</div>

@code {
    private string sempUrl;
    private string sempMessageVpn;
    private string sempUsername;
    private string sempPassword;
    private bool sempSslVerify = true;

    private string hostname;
    private int smfPort;
    private int smfsPort;
    private bool smfsEnabled;

    private List<SEMPService.GetQueuesDetails> Queues = new List<SEMPService.GetQueuesDetails>();
    private List<SEMPService.GetQueuesDetails> FilteredQueues =>
        string.IsNullOrEmpty(QueueNameFilterText) && string.IsNullOrEmpty(QueueOwnerFilterText) ?
        Queues :
        Queues.Where(q =>
            (string.IsNullOrEmpty(QueueNameFilterText) || q.queueName.Contains(QueueNameFilterText, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(QueueOwnerFilterText) || q.queueOwner.Contains(QueueOwnerFilterText, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    private List<SEMPService.GetQueuesDetails> PagedQueues => FilteredQueues.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();

    private string QueueNameFilterText { get; set; }
    private string QueueOwnerFilterText { get; set; }
    
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage * PageSize < FilteredQueues.Count;



    private async Task GetQueues()
    {
        try
        {
            var config = await SEMPService.GetListenerAsync(sempUrl, sempMessageVpn, sempUsername, sempPassword, sempSslVerify);
            smfsEnabled = config.SmfsEnabled;
            smfPort = config.SmfPort;
            smfsPort = config.SmfsPort;

            Queues = await SEMPService.GetQueuesAsync(sempUrl, sempMessageVpn, sempUsername, sempPassword, sempSslVerify);
            toastService.ShowSuccess("Queues retrieved successfully");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error retrieving queues: {ex.Message}");
        }
    }

    private void ApplyFilter(ChangeEventArgs e)
    {
        CurrentPage = 1;
        StateHasChanged();
    }

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
        }
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
        }
    }

    private void BrowseQueue(string queueName, string queueOwner)
    {
        string hostname = new Uri(sempUrl).Host;
        if (smfsEnabled)
        {
            hostname = hostname + ":" + smfsPort;
        } else
        {
            hostname = hostname + ":" + smfPort;
        }
        var uri = $"queue-browser?&vpn={sempMessageVpn}&hostname={hostname}&queue={queueName}&username={queueOwner}";
        Navigation.NavigateTo(uri);
    }
}

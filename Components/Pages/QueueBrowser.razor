@page "/queue-browser"
@using SolaceWebClient.Services
@using Blazorise
@using Blazorise.DataGrid
@inject QueueBrowserService QueueBrowserService
@inject ILogger<QueueBrowser> Logger
@inject Blazored.Toast.Services.IToastService toastService
@inject NavigationManager Navigation
@inject PresetService PresetService
@inject IModalService ModalService
@inject IJSRuntime JsRuntime

<Layout>
    <Title>Queue Browser</Title>

    <div class="form-group">
        <label>Select Preset</label>
        <select class="form-select-sm" @onchange="LoadPreset">
            <option value="">Select a preset</option>
            @foreach (var preset in presets)
            {
                <option value="@preset.Name">@preset.Name</option>
            }
        </select>
        <button class="btn btn-secondary" @onclick="ShowSavePresetModal">Save Preset</button>
        <button class="btn btn-secondary" @onclick="DeletePreset">Delete Preset</button>

    </div>

    <div class="overlay" style="display: @(isDeleting ? "block" : "none")">
        <div class="loading-message-delete">
            <p>Deleting Message</p>
            <p>@deletingMessageId</p>
        </div>
    </div>
    <div class="overlay" style="display: @(isBrowsing ? "block" : "none")">
        <div class="loading-message-browsing">
            <p>Browsing Queue ...</p>
        </div>
    </div>

    <div class="form-group">
        <div class="input-with-checkbox">
            <div class="input-container">
                <label>Hostname:Port</label>
                <input @bind="host" name="host" autocomplete="on" placeholder="tcps://broker.domain:55443" />
            </div>
            <div class="checkbox-container">
                <input type="checkbox" @bind="useTcps" id="useTcps" />
                <label for="useTcps">TCPS</label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" @bind="sslVerify" id="sslVerify" />
                <label for="sslVerify">SSL Verify</label>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label>VPN Name</label>
        <input @bind="vpnName" name="vpnName" autocomplete="on" placeholder="default" />
    </div>
    <div class="form-group">
        <label>Username</label>
        <input @bind="username" name="username" autocomplete="on" placeholder="Username" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <input @bind="password" type="password" autocomplete="on" placeholder="Password" />
    </div>
    <div class="form-group">
        <label>Queue Name</label>
        <input @bind="queueName" name="queueName" autocomplete="on" placeholder="Queue Name" />
    </div>
    <div class="form-group">
        <label>Max Messages</label>
        <input @bind="maxMessages" type="number" name="maxMessages" min="1" />
    </div>
    <button class="btn btn-primary" @onclick="BrowseQueueAsync">Browse Queue</button>

    <h4>Messages</h4>
    <DataGrid TItem="MessageDetails"
              Data="@messages"
              @ref="dataGrid"
              RowOverlayBackground="Background.Transparent"
              DetailRowStartsVisible="false"
              Filterable
              FilterMethod="DataGridFilterMethod.Contains"
              ShowPager
              ShowPageSizes
              PagerPosition="DataGridPagerPosition.TopAndBottom"
              PagerOptions="new(){ ButtonSize=Size.Small}">
        <TotalItemsTemplate><Badge Color="Color.Success">@context.TotalItems total items</Badge></TotalItemsTemplate>
        <TotalItemsShortTemplate><Badge Color="Color.Success">@context.TotalItems</Badge></TotalItemsShortTemplate>
        <DataGridColumns>
            <DataGridColumn TItem="MessageDetails" Field="ADMessageId" Caption="Message ID" />
            <DataGridColumn TItem="MessageDetails" Field="FormattedDateTime" Caption="Sender Timestamp" />
            <DataGridColumn TItem="MessageDetails" Field="DestinationName" Caption="Destination" />
            <DataGridColumn TItem="MessageDetails" Field="ApplicationMessageId" Caption="Application Message ID" />
            <DataGridColumn TItem="MessageDetails" Field="SenderId" Caption="Sender ID" />
            <DataGridColumn TItem="MessageDetails" Field="ApplicationMessageType" Caption="Message Type" />
            <DataGridColumn TItem="MessageDetails" Field="CorrelationId" Caption="Correlation ID" />
            <DataGridColumn TItem="MessageDetails" Field="DeliveryMode" Caption="Delivery Mode" />
        </DataGridColumns>
        <RowOverlayTemplate>
            <Div>
                <Button Color="Color.Danger" Size="Size.ExtraSmall" @onclick="() => DeleteMessage(context.Item.ADMessageId)">
                    <Icon Name="IconName.Delete" /> Delete
                </Button>
            </Div>
        </RowOverlayTemplate>
        <DetailRowTemplate Context="message">
            <div class="message-content">
                <div class="parent" style="display: flex;">
                    <div class="content" style="flex: 1; border-right: 2px solid black; overflow: hidden;">
                        @if (!string.IsNullOrWhiteSpace(message.MessageContent))
                        {
                            <br>
                            @message.MessageContent
                            <br>
                        }
                        else if (!string.IsNullOrWhiteSpace(message.MessageContentXML))
                        {
                            <pre><code>@message.MessageContentXML</code></pre>
                        }
                        else
                        {
                            <p>No content available</p>
                        }
                    </div>
                    <div class="content" style="margin-left: 2px;">
                        @if (message.UserProperties != null)
                        {
                            foreach (var property in message.UserProperties)
                            {
                                <p>@property.Key: @property.Value</p>
                            }
                        }
                        else
                        {
                            <p>No user properties</p>
                        }
                    </div>
                </div>
            </div>
        </DetailRowTemplate>
    </DataGrid>

    <Modal @ref="savePresetModal">
        <ModalContent Centered Background="Background.Dark">
            <ModalHeader>
                <ModalTitle>Save Preset</ModalTitle>
                <CloseButton Clicked="HideSavePresetModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                        <FieldLabel>Preset Name</FieldLabel>
                        <TextEdit @bind-Text="@presetName" Placeholder="Enter preset name...">
                            <Feedback>
                                <ValidationNone>Please enter a valid preset name</ValidationNone>
                                <ValidationError>Please enter a valid preset name</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
                <Field>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                        <FieldLabel>Host</FieldLabel>
                        <TextEdit @bind-Text="@host" Placeholder="Enter host...">
                            <Feedback>
                                <ValidationNone>Please enter a valid host</ValidationNone>
                                <ValidationError>Please enter a valid host</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
                <Field>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                    <FieldLabel>VPN Name</FieldLabel>
                    <TextEdit @bind-Text="@vpnName" Placeholder="Enter VPN name...">
                            <Feedback>
                                <ValidationNone>Please enter a valid VPN name</ValidationNone>
                                <ValidationError>Please enter a valid VPN name</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
                <Field>
                    <FieldLabel>Username</FieldLabel>
                    <TextEdit @bind-Text="@username" Placeholder="Enter username..." />
                </Field>
                <Field>
                    <FieldLabel>Queue Name</FieldLabel>
                    <TextEdit @bind-Text="@queueName" Placeholder="Enter queue name..." />
                </Field>

            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="HideSavePresetModal">Cancel</Button>
                <Button Color="Color.Primary" Clicked="SavePreset">Save</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

</Layout>



@code {
    private string host;
    private string vpnName;
    private string username;
    private string password;
    private string queueName;
    private int maxMessages = 50;
    private bool sslVerify = true;
    private bool useTcps = true;
    private List<MessageDetails> messages = new List<MessageDetails>();
    private DataGrid<MessageDetails> dataGrid;
    private string selectedPresetName;
    private Modal savePresetModal;
    private string presetName;
    private List<PresetModel> presets = new List<PresetModel>();

    private bool isBrowsing = false;

    private string FormatHost(string host, bool useTcps)
    {
        if (useTcps && !host.StartsWith("tcps://"))
        {
            return "tcps://" + host;
        }
        return host;
    }

    private async Task BrowseQueueAsync()
    {
        Logger.LogInformation("BrowseQueue method called.");
        try
        {
            string formattedHost = FormatHost(host, useTcps);
            isBrowsing = true;
            messages = await QueueBrowserService.BrowseQueueAsync(formattedHost, vpnName, username, password, queueName, sslVerify, maxMessages);
            Logger.LogInformation("Messages retrieved: {count}", messages.Count);
        }
        catch (SolaceSystems.Solclient.Messaging.OperationErrorException ex)
        {
            Logger.LogError("Error browsing queue: {ex}", ex.ErrorInfo);
            toastService.ShowError($"Error browsing Queue: {ex.ErrorInfo}");
        }
        finally
        {
            await Task.Delay(2000);
            isBrowsing = false;
            deletingMessageId = "";
        }
    }

    private bool isDeleting = false;
    private string deletingMessageId = "";

    private async Task DeleteMessage(long adMessageId)
    {
        try
        {
            string formattedHost = FormatHost(host, useTcps);
            isDeleting = true;
            deletingMessageId = adMessageId.ToString();
            await QueueBrowserService.DeleteMessage(formattedHost, vpnName, username, password, queueName, sslVerify, adMessageId);
            toastService.ShowSuccess("Deleting message with ID: " + deletingMessageId);
            await BrowseQueueAsync();
        }
        catch (SolaceSystems.Solclient.Messaging.OperationErrorException ex)
        {
            toastService.ShowError($"Error deleting Message: {ex.ErrorInfo}");
        }
        finally
        {
            await Task.Delay(2000);
            isDeleting = false;
            deletingMessageId = "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        presets = await PresetService.GetPresetsAsync();
    }

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("host", out var hostValue))
        {
            host = hostValue;
        }

        if (queryParams.TryGetValue("vpn", out var vpnValue))
        {
            vpnName = vpnValue;
        }

        if (queryParams.TryGetValue("queue", out var queueValue))
        {
            queueName = queueValue;
        }

        if (queryParams.TryGetValue("username", out var usernameValue))
        {
            username = usernameValue;
        }

        if (queryParams.TryGetValue("hostname", out var hostnameValue))
        {
            host = hostnameValue;
        }

        password = string.Empty;
    }

    private async Task LoadPreset(ChangeEventArgs e)
    {
        selectedPresetName = e.Value?.ToString();
        Console.WriteLine($"Selected Preset Name: {selectedPresetName}");
        if (!string.IsNullOrEmpty(selectedPresetName))
        {
            var preset = presets.FirstOrDefault(p => p.Name == selectedPresetName);
            if (preset != null)
            {
                host = preset.Host;
                vpnName = preset.VpnName;
                username = preset.Username;
                queueName = preset.QueueName;

                Console.WriteLine($"Loaded Preset: {preset.Name}");
            }
            else
            {
                Console.WriteLine($"Preset with name '{selectedPresetName}' not found.");
            }
        }
    }
    private void ShowSavePresetModal()
    {
        presetName = "";
        savePresetModal.Show();
    }

    private void HideSavePresetModal()
    {
        savePresetModal.Hide();
    }

    private async Task SavePreset()
    {
        var existingPreset = presets.FirstOrDefault(p => p.Name == presetName);

        if (existingPreset != null)
        {
            if (await JsRuntime.InvokeAsync<bool>("confirm", $"A preset with the name '{presetName}' already exists. Do you want to overwrite it?"))
            {
                existingPreset.Host = host;
                existingPreset.VpnName = vpnName;
                existingPreset.Username = username;
                existingPreset.QueueName = queueName;

                await PresetService.SavePresetAsync(existingPreset);
                presets = await PresetService.GetPresetsAsync();
                toastService.ShowSuccess("Preset overwritten successfully");
            }
        }
        else
        {
            var newPreset = new PresetModel
                {
                    Name = presetName,
                    Host = host,
                    VpnName = vpnName,
                    Username = username,
                    QueueName = queueName
                };

            await PresetService.SavePresetAsync(newPreset);
            presets = await PresetService.GetPresetsAsync();
            toastService.ShowSuccess("Preset saved successfully");
        }

        savePresetModal.Hide();
    }

    private async Task DeletePreset()
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", $"Deleting  '{selectedPresetName}' Are you sure ?"))
        {
            await PresetService.DeletePresetAsync(selectedPresetName);
            presets = await PresetService.GetPresetsAsync();
            toastService.ShowSuccess("Deleted Preset successfully");
        }
    }
}
